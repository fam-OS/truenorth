generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

model KpiStatus {
  id        String   @id @default(cuid())
  kpiId     String
  year      Int
  quarter   Quarter
  amount    Float    // Metric amount for the period
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Kpi       Kpi      @relation(fields: [kpiId], references: [id], onDelete: Cascade)

  @@index([kpiId])
  @@index([year])
}

model KpiBusinessUnit {
  id             String       @id @default(cuid())
  kpiId          String
  businessUnitId String
  createdAt      DateTime     @default(now())
  Kpi            Kpi          @relation(fields: [kpiId], references: [id], onDelete: Cascade)
  BusinessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id], onDelete: Cascade)

  @@unique([kpiId, businessUnitId])
  @@index([businessUnitId])
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model BusinessUnit {
  id          String        @id
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Goal        Goal[]
  Initiative  Initiative[]
  Kpi         Kpi[]
  Metric      Metric[]
  Stakeholder Stakeholder[]
  Team        Team[]
  KpiBusinessUnit KpiBusinessUnit[]
}

model CeoGoal {
  id             String       @id
  description    String
  order          Int          @default(0)
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model CompanyAccount {
  id                String         @id
  userId            String         @unique
  name              String
  description       String?
  founderId         String?        @unique
  employees         String?
  headquarters      String?
  launchedDate      String?
  isPrivate         Boolean        @default(true)
  tradedAs          String?
  corporateIntranet String?
  glassdoorLink     String?
  linkedinLink      String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  founder           TeamMember?    @relation("CompanyFounder", fields: [founderId], references: [id])
  teamMembers       TeamMember[]   @relation("AccountMembers")
  User              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Organization      Organization[]
}

model Cost {
  id             String        @id
  teamId         String
  organizationId String?
  year           Int
  type           CostType
  q1Forecast     Decimal       @default(0) @db.Decimal(12, 2)
  q1Actual       Decimal       @default(0) @db.Decimal(12, 2)
  q2Forecast     Decimal       @default(0) @db.Decimal(12, 2)
  q2Actual       Decimal       @default(0) @db.Decimal(12, 2)
  q3Forecast     Decimal       @default(0) @db.Decimal(12, 2)
  q3Actual       Decimal       @default(0) @db.Decimal(12, 2)
  q4Forecast     Decimal       @default(0) @db.Decimal(12, 2)
  q4Actual       Decimal       @default(0) @db.Decimal(12, 2)
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  Team           Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([teamId])
  @@index([year])
}

model FeatureRequest {
  id          String   @id
  title       String
  description String
  category    String
  priority    String   @default("medium")
  useCase     String?
  status      String   @default("submitted")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id             String       @id
  title          String
  description    String?
  stakeholderId  String?
  progressNotes  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  businessUnitId String
  quarter        Quarter
  year           Int
  BusinessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])
  Stakeholder    Stakeholder? @relation(fields: [stakeholderId], references: [id])
}

model HeadcountTracker {
  id             String        @id
  teamId         String
  organizationId String?
  year           Int
  role           String
  level          String
  salary         Decimal       @db.Decimal(12, 2)
  q1Forecast     Int           @default(0)
  q1Actual       Int           @default(0)
  q2Forecast     Int           @default(0)
  q2Actual       Int           @default(0)
  q3Forecast     Int           @default(0)
  q3Actual       Int           @default(0)
  q4Forecast     Int           @default(0)
  q4Actual       Int           @default(0)
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  Team           Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([teamId])
  @@index([year])
}

model Initiative {
  id                    String            @id
  name                  String
  summary               String?
  valueProposition      String?
  implementationDetails String?
  releaseDate           DateTime?
  organizationId        String
  ownerId               String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  businessUnitId        String?
  type                  InitiativeType?
  atRisk                Boolean           @default(false)
  status                InitiativeStatus?
  BusinessUnit          BusinessUnit?     @relation(fields: [businessUnitId], references: [id])
  Organization          Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  TeamMember            TeamMember?       @relation(fields: [ownerId], references: [id])
  Kpi                   Kpi[]

  @@index([businessUnitId])
  @@index([organizationId])
  @@index([ownerId])
}

model Kpi {
  id                String        @id
  name              String
  targetMetric      Float?
  actualMetric      Float?
  quarter           Quarter
  year              Int
  organizationId    String
  teamId            String
  initiativeId      String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  businessUnitId    String?
  metTarget         Boolean?
  metTargetPercent  Float?
  kpiType           KPIType?
  revenueImpacting  Boolean       @default(false)
  BusinessUnit      BusinessUnit? @relation(fields: [businessUnitId], references: [id])
  Initiative        Initiative?   @relation(fields: [initiativeId], references: [id])
  Organization      Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  Team              Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  KpiBusinessUnit   KpiBusinessUnit[]
  KpiStatus         KpiStatus[]

  @@index([businessUnitId])
  @@index([initiativeId])
  @@index([organizationId])
  @@index([teamId])
}

model Meeting {
  id            String      @id
  date          DateTime
  notes         String
  stakeholderId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Stakeholder   Stakeholder @relation(fields: [stakeholderId], references: [id])
}

model Metric {
  id             String       @id
  name           String
  target         Float
  current        Float
  unit           String
  businessUnitId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  BusinessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])
}

model Note {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id])
}

model OpsReview {
  id            String          @id
  title         String
  description   String?
  quarter       Quarter
  month         Int?
  year          Int
  teamId        String
  ownerId       String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  TeamMember    TeamMember?     @relation(fields: [ownerId], references: [id])
  Team          Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  OpsReviewItem OpsReviewItem[]
}

model OpsReviewItem {
  id           String      @id
  title        String
  description  String?
  targetMetric Float?
  actualMetric Float?
  quarter      Quarter
  year         Int
  opsReviewId  String
  teamId       String
  ownerId      String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  OpsReview    OpsReview   @relation(fields: [opsReviewId], references: [id], onDelete: Cascade)
  TeamMember   TeamMember? @relation(fields: [ownerId], references: [id])
  Team         Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([opsReviewId])
  @@index([ownerId])
  @@index([teamId])
}

model Organization {
  id               String             @id
  name             String
  description      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  companyAccountId String
  parentId         String?
  CeoGoal          CeoGoal[]
  Cost             Cost[]
  HeadcountTracker HeadcountTracker[]
  Initiative       Initiative[]
  Kpi              Kpi[]
  CompanyAccount   CompanyAccount     @relation(fields: [companyAccountId], references: [id], onDelete: Cascade)
  Team             Team[]
  User             User[]
  Parent           Organization?      @relation("OrgToParent", fields: [parentId], references: [id])
  Children         Organization[]     @relation("OrgToParent")

  @@index([parentId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Stakeholder {
  id                String        @id
  name              String
  email             String
  role              String
  businessUnitId    String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  reportsToId       String?
  teamMemberId      String        @unique
  relationshipNotes String?
  Goal              Goal[]
  Meeting           Meeting[]
  BusinessUnit      BusinessUnit? @relation(fields: [businessUnitId], references: [id])
  TeamMember        TeamMember    @relation(fields: [teamMemberId], references: [id])
  Stakeholder       Stakeholder?  @relation("StakeholderToStakeholder", fields: [reportsToId], references: [id])
  other_Stakeholder Stakeholder[] @relation("StakeholderToStakeholder")
}

model SupportRequest {
  id          String   @id
  subject     String
  category    String
  priority    String   @default("medium")
  description String
  steps       String?
  status      String   @default("open")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id          String     @id
  title       String
  description String?
  dueDate     DateTime?
  status      TaskStatus
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  notes       Note[]
}

model Team {
  id               String             @id @default(cuid())
  name             String
  description      String?
  organizationId   String
  businessUnitId   String?
  Cost             Cost[]
  HeadcountTracker HeadcountTracker[]
  Kpi              Kpi[]
  OpsReview        OpsReview[]
  OpsReviewItem    OpsReviewItem[]
  BusinessUnit     BusinessUnit?      @relation(fields: [businessUnitId], references: [id])
  Organization     Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  TeamMember       TeamMember[]
}

model TeamMember {
  id               String          @id @default(cuid())
  name             String
  email            String?
  role             String?
  teamId           String?
  companyAccountId String?
  isActive         Boolean         @default(true)
  reportsToId      String?
  CompanyAccount   CompanyAccount? @relation("AccountMembers", fields: [companyAccountId], references: [id], onDelete: Cascade)
  FoundedCompany   CompanyAccount? @relation("CompanyFounder")
  Initiative       Initiative[]
  OpsReview        OpsReview[]
  OpsReviewItem    OpsReviewItem[]
  TeamMember       TeamMember?     @relation("TeamMemberToTeamMember", fields: [reportsToId], references: [id])
  other_TeamMember TeamMember[]    @relation("TeamMemberToTeamMember")
  Team             Team?           @relation(fields: [teamId], references: [id], onDelete: SetNull)
  Stakeholder      Stakeholder?

  @@unique([companyAccountId, email])
  @@index([teamId])
}

model User {
  id             String           @id
  email          String           @unique
  name           String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  emailVerified  DateTime?
  image          String?
  passwordHash   String?
  accounts       Account[]
  CompanyAccount CompanyAccount?
  FeatureRequest FeatureRequest[]
  sessions       Session[]
  SupportRequest SupportRequest[]
  Organization   Organization[]
  // MFA (Email OTP) fields
  mfaEnforced    Boolean          @default(true)
  otpCode        String?
  otpExpiresAt   DateTime?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum CostType {
  SOFTWARE
  TRAINING
  SALARY
  OTHER
}


enum InitiativeStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
}

enum InitiativeType {
  CAPITALIZABLE
  OPERATIONAL_EFFICIENCY
  KTLO
}

enum Quarter {
  Q1
  Q2
  Q3
  Q4
}

enum KPIType {
  QUALITATIVE
  QUANTITATIVE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  BLOCKED
}
