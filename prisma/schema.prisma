generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  status      TaskStatus
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  notes       Note[]
}

model Note {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id])
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  organizations Organization[] @relation("OrganizationToUser")
}

model Organization {
  id            String         @id @default(cuid())
  name          String
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  businessUnits BusinessUnit[]
  teams         Team[]
  users         User[]         @relation("OrganizationToUser")
  initiatives   Initiative[]
  kpis          Kpi[]
}

model BusinessUnit {
  id           String        @id @default(cuid())
  name         String
  description  String?
  orgId        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  organization Organization  @relation(fields: [orgId], references: [id])
  metrics      Metric[]
  stakeholders Stakeholder[]
  initiatives  Initiative[]
  kpis         Kpi[]
}

model Stakeholder {
  id             String        @id @default(cuid())
  name           String
  email          String
  role           String
  businessUnitId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  goals          Goal[]
  meetings       Meeting[]
  businessUnit   BusinessUnit? @relation(fields: [businessUnitId], references: [id])
  // Self-referential manager relationship
  reportsToId    String?
  reportsTo      Stakeholder?  @relation("StakeholderReports", fields: [reportsToId], references: [id])
  directReports  Stakeholder[] @relation("StakeholderReports")
}

model Goal {
  id            String      @id @default(cuid())
  title         String
  description   String
  startDate     DateTime
  endDate       DateTime
  status        GoalStatus
  stakeholderId String
  requirements  String?
  progressNotes String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  stakeholder   Stakeholder @relation(fields: [stakeholderId], references: [id])
}

model Meeting {
  id            String      @id @default(cuid())
  date          DateTime
  notes         String
  stakeholderId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  stakeholder   Stakeholder @relation(fields: [stakeholderId], references: [id])
}

model Metric {
  id             String       @id @default(cuid())
  name           String
  target         Float
  current        Float
  unit           String
  businessUnitId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])
}

model Team {
  id             String          @id @default(cuid())
  name           String
  description    String?
  organizationId String
  opsReviews     OpsReview[]
  OpsReviewItem  OpsReviewItem[]
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members        TeamMember[]
  kpis           Kpi[]

  @@unique([organizationId, name])
  @@index([organizationId])
}

model TeamMember {
  id                  String          @id @default(cuid())
  name                String
  email               String?
  role                String?
  teamId              String
  isActive            Boolean         @default(true)
  // Self-referential manager relationship
  reportsToId         String?
  reportsTo           TeamMember?     @relation("TeamMemberReports", fields: [reportsToId], references: [id])
  subordinates        TeamMember[]    @relation("TeamMemberReports")
  ownedOpsReviews     OpsReview[]     @relation("OpsReviewOwner")
  ownedOpsReviewItems OpsReviewItem[] @relation("OpsReviewItemOwner")
  team                Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  ownedInitiatives    Initiative[]    @relation("InitiativeOwner")

  @@unique([teamId, email])
  @@index([teamId])
}

model OpsReview {
  id          String          @id @default(cuid())
  title       String
  description String?
  quarter     Quarter
  month       Int?
  year        Int
  teamId      String
  ownerId     String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  owner       TeamMember?     @relation("OpsReviewOwner", fields: [ownerId], references: [id])
  team        Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  items       OpsReviewItem[]

  @@index([teamId])
  @@index([ownerId])
}

model OpsReviewItem {
  id           String      @id @default(cuid())
  title        String
  description  String?
  targetMetric Float?
  actualMetric Float?
  quarter      Quarter
  year         Int
  opsReviewId  String
  teamId       String
  ownerId      String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  opsReview    OpsReview   @relation(fields: [opsReviewId], references: [id], onDelete: Cascade)
  owner        TeamMember? @relation("OpsReviewItemOwner", fields: [ownerId], references: [id])
  team         Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([opsReviewId])
  @@index([teamId])
  @@index([ownerId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum GoalStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  AT_RISK
  BLOCKED
  CANCELLED
}

enum Quarter {
  Q1
  Q2
  Q3
  Q4
}

enum InitiativeType {
  CAPITALIZABLE
  OPERATIONAL_EFFICIENCY
  KTLO
}

enum InitiativeStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
}

model Initiative {
  id                    String    @id @default(cuid())
  name                  String
  type                  InitiativeType?
  atRisk                Boolean   @default(false)
  status                InitiativeStatus?
  summary               String? // one-line summary
  valueProposition      String?
  implementationDetails String?
  releaseDate           DateTime?
  organizationId        String
  ownerId               String?
  businessUnitId        String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner        TeamMember?   @relation("InitiativeOwner", fields: [ownerId], references: [id])
  businessUnit BusinessUnit? @relation(fields: [businessUnitId], references: [id])
  kpis         Kpi[]

  @@index([organizationId])
  @@index([ownerId])
  @@index([businessUnitId])
}

model Kpi {
  id             String   @id @default(cuid())
  name           String
  targetMetric   Float?
  actualMetric   Float?
  forecastedRevenue Float?
  actualRevenue     Float?
  metTarget      Boolean?
  metTargetPercent Float?
  quarter        Quarter
  year           Int
  organizationId String
  teamId         String
  initiativeId   String?
  businessUnitId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  team         Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  initiative   Initiative?   @relation(fields: [initiativeId], references: [id])
  businessUnit BusinessUnit? @relation(fields: [businessUnitId], references: [id])

  @@index([organizationId])
  @@index([teamId])
  @@index([initiativeId])
  @@index([businessUnitId])
}
