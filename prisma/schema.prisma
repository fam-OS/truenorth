generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  status      TaskStatus
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  notes       Note[]
}

model Note {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id])
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  emailVerified   DateTime?
  image           String?
  passwordHash    String?
  accounts        Account[]
  companyAccount  CompanyAccount?  @relation("UserCompanyAccount")
  featureRequests FeatureRequest[]
  sessions        Session[]
  supportRequests SupportRequest[]
  organizations   Organization[]   @relation("OrganizationToUser")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FeatureRequest {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  priority    String   @default("medium")
  useCase     String?
  status      String   @default("submitted")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SupportRequest {
  id          String   @id @default(cuid())
  subject     String
  category    String
  priority    String   @default("medium")
  description String
  steps       String?
  status      String   @default("open")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CompanyAccount {
  id                String         @id @default(cuid())
  userId            String         @unique
  name              String
  description       String?
  founderId         String?
  employees         String?
  headquarters      String?
  launchedDate      String?
  isPrivate         Boolean        @default(true)
  tradedAs          String?
  corporateIntranet String?
  glassdoorLink     String?
  linkedinLink      String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  founder           TeamMember?    @relation("CompanyAccountFounder", fields: [founderId], references: [id])
  user              User           @relation("UserCompanyAccount", fields: [userId], references: [id], onDelete: Cascade)
  organizations     Organization[]
}

model Organization {
  id                String             @id @default(cuid())
  name              String
  description       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  companyAccountId  String
  businessUnits     BusinessUnit[]
  ceoGoals          CeoGoal[]
  costs             Cost[]
  headcountTrackers HeadcountTracker[]
  initiatives       Initiative[]
  kpis              Kpi[]
  companyAccount    CompanyAccount     @relation(fields: [companyAccountId], references: [id], onDelete: Cascade)
  teams             Team[]
  users             User[]             @relation("OrganizationToUser")
}

model BusinessUnit {
  id           String        @id @default(cuid())
  name         String
  description  String?
  orgId        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  organization Organization  @relation(fields: [orgId], references: [id])
  initiatives  Initiative[]
  kpis         Kpi[]
  metrics      Metric[]
  stakeholders Stakeholder[]
}

model Stakeholder {
  id             String        @id @default(cuid())
  name           String
  email          String
  role           String
  businessUnitId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  reportsToId    String?
  goals          Goal[]
  meetings       Meeting[]
  businessUnit   BusinessUnit? @relation(fields: [businessUnitId], references: [id])
  reportsTo      Stakeholder?  @relation("StakeholderReports", fields: [reportsToId], references: [id])
  directReports  Stakeholder[] @relation("StakeholderReports")
}

model Goal {
  id            String      @id @default(cuid())
  title         String
  description   String
  startDate     DateTime
  endDate       DateTime
  status        GoalStatus
  stakeholderId String
  requirements  String?
  progressNotes String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  stakeholder   Stakeholder @relation(fields: [stakeholderId], references: [id])
}

model Meeting {
  id            String      @id @default(cuid())
  date          DateTime
  notes         String
  stakeholderId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  stakeholder   Stakeholder @relation(fields: [stakeholderId], references: [id])
}

model Metric {
  id             String       @id @default(cuid())
  name           String
  target         Float
  current        Float
  unit           String
  businessUnitId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  businessUnit   BusinessUnit @relation(fields: [businessUnitId], references: [id])
}

model Team {
  id                String             @id @default(cuid())
  name              String
  description       String?
  organizationId    String
  costs             Cost[]
  headcountTrackers HeadcountTracker[]
  kpis              Kpi[]
  opsReviews        OpsReview[]
  OpsReviewItem     OpsReviewItem[]
  organization      Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members           TeamMember[]

  @@unique([organizationId, name])
  @@index([organizationId])
}

model TeamMember {
  id                     String           @id @default(cuid())
  name                   String
  email                  String?
  role                   String?
  teamId                 String
  isActive               Boolean          @default(true)
  reportsToId            String?
  foundedCompanyAccounts CompanyAccount[] @relation("CompanyAccountFounder")
  ownedInitiatives       Initiative[]     @relation("InitiativeOwner")
  ownedOpsReviews        OpsReview[]      @relation("OpsReviewOwner")
  ownedOpsReviewItems    OpsReviewItem[]  @relation("OpsReviewItemOwner")
  reportsTo              TeamMember?      @relation("TeamMemberReports", fields: [reportsToId], references: [id])
  subordinates           TeamMember[]     @relation("TeamMemberReports")
  team                   Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
  @@index([teamId])
}

model OpsReview {
  id          String          @id @default(cuid())
  title       String
  description String?
  quarter     Quarter
  month       Int?
  year        Int
  teamId      String
  ownerId     String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  owner       TeamMember?     @relation("OpsReviewOwner", fields: [ownerId], references: [id])
  team        Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  items       OpsReviewItem[]

  @@index([teamId])
  @@index([ownerId])
}

model OpsReviewItem {
  id           String      @id @default(cuid())
  title        String
  description  String?
  targetMetric Float?
  actualMetric Float?
  quarter      Quarter
  year         Int
  opsReviewId  String
  teamId       String
  ownerId      String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  opsReview    OpsReview   @relation(fields: [opsReviewId], references: [id], onDelete: Cascade)
  owner        TeamMember? @relation("OpsReviewItemOwner", fields: [ownerId], references: [id])
  team         Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([opsReviewId])
  @@index([teamId])
  @@index([ownerId])
}

model Initiative {
  id                    String            @id @default(cuid())
  name                  String
  summary               String?
  valueProposition      String?
  implementationDetails String?
  releaseDate           DateTime?
  organizationId        String
  ownerId               String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  businessUnitId        String?
  type                  InitiativeType?
  atRisk                Boolean           @default(false)
  status                InitiativeStatus?
  businessUnit          BusinessUnit?     @relation(fields: [businessUnitId], references: [id])
  organization          Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner                 TeamMember?       @relation("InitiativeOwner", fields: [ownerId], references: [id])
  kpis                  Kpi[]

  @@index([organizationId])
  @@index([ownerId])
  @@index([businessUnitId])
}

model HeadcountTracker {
  id             String        @id @default(cuid())
  teamId         String
  organizationId String?
  year           Int
  role           String
  level          String
  salary         Decimal       @db.Decimal(12, 2)
  q1Forecast     Int           @default(0)
  q1Actual       Int           @default(0)
  q2Forecast     Int           @default(0)
  q2Actual       Int           @default(0)
  q3Forecast     Int           @default(0)
  q3Actual       Int           @default(0)
  q4Forecast     Int           @default(0)
  q4Actual       Int           @default(0)
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  team           Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([organizationId])
  @@index([year])
}

model Cost {
  id             String        @id @default(cuid())
  teamId         String
  organizationId String?
  year           Int
  type           CostType
  q1Forecast     Decimal       @default(0) @db.Decimal(12, 2)
  q1Actual       Decimal       @default(0) @db.Decimal(12, 2)
  q2Forecast     Decimal       @default(0) @db.Decimal(12, 2)
  q2Actual       Decimal       @default(0) @db.Decimal(12, 2)
  q3Forecast     Decimal       @default(0) @db.Decimal(12, 2)
  q3Actual       Decimal       @default(0) @db.Decimal(12, 2)
  q4Forecast     Decimal       @default(0) @db.Decimal(12, 2)
  q4Actual       Decimal       @default(0) @db.Decimal(12, 2)
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  team           Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([organizationId])
  @@index([year])
}

model Kpi {
  id                String        @id @default(cuid())
  name              String
  targetMetric      Float?
  actualMetric      Float?
  quarter           Quarter
  year              Int
  organizationId    String
  teamId            String
  initiativeId      String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  businessUnitId    String?
  metTarget         Boolean?
  metTargetPercent  Float?
  actualRevenue     Float?
  forecastedRevenue Float?
  businessUnit      BusinessUnit? @relation(fields: [businessUnitId], references: [id])
  initiative        Initiative?   @relation(fields: [initiativeId], references: [id])
  organization      Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  team              Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([teamId])
  @@index([initiativeId])
  @@index([businessUnitId])
}

model CeoGoal {
  id             String       @id @default(cuid())
  description    String
  order          Int          @default(0)
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum GoalStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  AT_RISK
  BLOCKED
  CANCELLED
}

enum Quarter {
  Q1
  Q2
  Q3
  Q4
}

enum InitiativeType {
  CAPITALIZABLE
  OPERATIONAL_EFFICIENCY
  KTLO
}

enum InitiativeStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
}

/// Cost Manager models and enums
enum CostType {
  SOFTWARE
  TRAINING
  SALARY
  OTHER
}
